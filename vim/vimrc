" Caleb Foust's vimrc
" It does everything you want it to. Maybe too much.

" Sets the directory for swap files
set directory^=$HOME/.vim/tmp//

" The home directory for vim
let g:CawnHome = $HOME . '/.vim/'

" Useful for sourcing the path in variables.
function Src(path)
  exec 'source ' . g:CawnHome . a:path
endfunction

" The directory for language-specific settings
let g:CawnLang = g:CawnHome . 'lang/'

" Docstring lets you add documentation strings for
" any and all <leader> bindings. Since I have so many,
" it'd be nice to be able to search through them with
" fzf or ctrlp.
call Src('docstring.vim')

"================================================
" GENERAL CONFIGURATION SETTINGS
"================================================
" Only my grandma uses four spaces.
" JK now I do too, thanks grandma
set tabstop=2 expandtab shiftwidth=2
set autoindent
set smartindent

" Jump around and show matches as we search with /.
" Useful when you want to look to see if something's in
" the file but don't want to commit to jumping to it.
set incsearch

" Allow for buffers to be hidden without saving. Vim
" still warns you if you try to quit without saving changes
" to disk.
set hidden

" Fix backspacing to allow backspacing past the point of
" insert.
set backspace=start

" Highlight lines that go over 80 characters
"augroup vimrc_autocmds
"autocmd BufEnter * highlight OverLength ctermbg=red guibg=#111111
  "autocmd BufEnter * match OverLength /\%120v.*/
"augroup END

" We need our fancy shmancy ruler
set ruler

" Makes line endings and whitespace easier to see.
set list

" Change the leader to space
" WARNING: makes you a master programmer
let mapleader = "\<Space>"
"================================================

" Source file that includes all plugins from Vundle and their
" configuration.
call Src('plugins.vim')

"================================================
" SPLIT COMMANDS
"================================================
" Make the default split behavior to be more logical
set splitbelow
set splitright

" Use tmux-like split commands
"================================================
"
"================================================
" FILE OPEN COMMANDS
"================================================
" Edit a file in the current file's directory in the current pane
map ,e :e <C-R>=expand("%:p:h") . "/" <CR>

" Edit a file in the current file's directory in a new split
map ,s :split <C-R>=expand("%:p:h") . "/" <CR>

" Useful `find` wrapper
call Src('/findfiles.vim')

" `Doc` adds documentation to a keybinding that starts with <leader>.
" See docstring.vim for more information.
Doc ve "Open .vimrc"
nnoremap <leader>ve :e ~/.vim/vimrc <CR>
Doc vr "Reload .vimrc"
nnoremap <leader>vr :source ~/.vim/vimrc <CR>
"================================================

"================================================
" AUTOCMD COMMANDS FOR SYNTAX AND PROFIT
"================================================
" Some of this is taken from a TA of mine's .vimrc that
" he distributed to my Introduction to Operating systems class back
" in the fall of 2016.
if has("autocmd")
   " When editing a file, always jump to the last cursor position
   autocmd BufReadPost * if line("'\"") | exe "normal '\"" | endif

   "In makefiles, don't expand tabs to spaces, since actual tabs are needed,
   "and set indentation at 8 chars to be sure that all indents are tabs:
   autocmd FileType make     set noexpandtab shiftwidth=8
   autocmd FileType automake set noexpandtab shiftwidth=8
   autocmd BufReadPost *.py  setlocal tabstop=4 shiftwidth=4
   autocmd BufNewFile,BufRead *.jlex set syntax=java
   autocmd BufNewFile,BufRead *.cup set syntax=java
   autocmd BufNewFile,BufRead *.hbs set syntax=html
   autocmd BufNewFile,BufRead *.vim set tw=0

   " C family languages
   autocmd BufReadPost *.m,*.h,*.c,*.mm,*.cpp,*.hpp source &lang . 'c/settings.vim'
   "autocmd BufReadPost *.cf, *.moo set syntax=c

   " Forces 8 space tabs to be consistent with gofmt
   autocmd BufReadPost *.go  setlocal tabstop=8 softtabstop=8 shiftwidth=8 noexpandtab

   " Enforce AkitaBox coding style
   autocmd BufReadPost *.js call Src('lang/js/settings.vim')
endif
"================================================

"================================================
" GVIM OPTIONS
"================================================
set go=i
"================================================

"================================================
" MISCELLANEOUS BINDINGS AND SUCH
"================================================
" Easy file write
nnoremap <silent> <leader>w :w<CR>

" Remove all trailing whitespace with Ctrl-/
nnoremap <silent> <c-\> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" Whenever you replace a word, it is copied, too. Useful for jumping to the
" next occurrence.
nnoremap <silent> ciw yiwciw
" Jump to the next occurrence of the text in register 0. Use in tandem with
" the command above to make replacements quickly.
nnoremap <silent> <leader>n /<C-r>0<CR>

" Delete line below with <leader>d and above with <leader>D
nnoremap <silent> <leader>d :+d <CR>
nnoremap <silent> <leader>D :-d <CR>

" Same, but add whitespace with <leader>s
" Pretty similar to unimpaired.vim's implementation
nnoremap <silent> <leader>s :<C-u>put =repeat(nr2char(10),v:count)<Bar>execute "'[-1"<CR>
nnoremap <silent> <leader>S :<C-u>put!=repeat(nr2char(10),v:count)<Bar>execute "']+1"<CR>

" Select the last pasted text with gp
nnoremap gp `[v`]

" Duplicate and jump to beginning of paste"
vnoremap <leader>h y`>p

" Remap j and k to scroll up and down
nnoremap j <C-D>
nnoremap k <C-U>

" Jump around curly blocks with s
nnoremap s ]}
nnoremap S [{
vmap s ]}
vmap S [{

" Quick jumps in quick list
map <c-n> :cn <CR>

" Normally in vim if you paste over text in virtual mode
" it puts it into your paste buffer. Annoying if you're
" jumping around and replacing text with gn. This little
" script fixes that.
"
" Taken from:
" https://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity/
function! RestoreRegister()
  let @" = s:restore_reg
  return ''
endfunction
function! s:Repl()
  let s:restore_reg = @"
  return "p@=RestoreRegister()\<cr>"
endfunction
vmap <silent> <expr> p <sid>Repl()
"================================================

" This is like something a superhero named Code Hero would say.
syntax on

" HAHAHAHA I bet there's silly stuff in here
source ~/.vimprivate
