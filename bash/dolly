#!/usr/bin/env bash

API_URL="https://api.github.com"

CACHE_DIR="$HOME/.dolly-cache"
mkdir -p $CACHE_DIR

# Check whether we have a cache for a string.
# TODO return false if the file is older than a day
have_cache() {
  [ -f "$CACHE_DIR/$1" ]
}

# Get the cache for a file.
get_cache() {
  cat "$CACHE_DIR/$1"
}

# Save a cache.
dump_cache() {
  echo "$2" > "$CACHE_DIR/$1"
}

# Get the GitHub organizations that the user belongs to.
# Returns a newline-separated list in the form of:
# "[org name] [API url to get repositories]"
get_orgs() {
  cache_name="github.orgs"

  if have_cache "$cache_name"; then
    orgs=$(get_cache "$cache_name")
  else
    orgs=$(curl -s -u "$GITHUB_USERNAME":"$GITHUB_TOKEN" "$API_URL"/user/orgs)
    dump_cache "$cache_name" "$orgs"
  fi

  read -d '' pycode <<"EOF"
import sys, json

data = json.load(sys.stdin)
orgs = map(lambda x: x['login'] + ' ' + x['repos_url'], data)
print('\\n'.join(orgs))
EOF

  orgs=$(echo "$orgs" | python -c "$pycode")
  echo "$orgs"
}

get_org_repos() {
  org_name="$1"
  org_url="$2"

  cache_name="github.$org_name.repos"
  if have_cache "$cache_name"; then
    repos=$(get_cache "$cache_name")
  else
    repos=$(curl -s -u "$GITHUB_USERNAME":"$GITHUB_TOKEN" "$org_url")
    dump_cache "$cache_name" "$repos"
  fi

  read -d '' pycode <<"EOF"
import sys, json

data = json.load(sys.stdin)
repos = map(lambda x: x['name'] + ' ' + x['ssh_url'], data)
print('\\n'.join(repos))
EOF

  repos=$(echo "$repos" | \
    python -c "$pycode")

  repos=$(while read -r line; do \
    repo_name=$(echo "$line" | awk '{ print $1; }') \
    repo_name=${repo_name##*( )}
    echo "$org_name/$repo_name $line"
  done <<< "$repos")

  echo "$repos"
}

get_user_repos() {
  cache_name="github.user.repos"
  if have_cache "$cache_name"; then
    repos=$(get_cache "$cache_name")
  else
    repos=$(curl -s -u "$GITHUB_USERNAME":"$GITHUB_TOKEN" "$API_URL/user/repos?affiliation=owner")
    dump_cache "$cache_name" "$repos"
  fi

  read -d '' pycode <<"EOF"
import sys, json

data = json.load(sys.stdin)
repos = map(lambda x: x['name'] + ' ' + x['ssh_url'], data)
print('\\n'.join(repos))
EOF

  repos=$(echo "$repos" | python -c "$pycode")

  repos=$(while read -r line; do \
    repo_name=$(echo "$line" | awk '{ print $1; }') \
    repo_name=${repo_name##*( )}
    echo "$GITHUB_USERNAME/$repo_name $line"
  done <<< "$repos")

  echo "$repos"
}

get_all_org_repos() {
  orgs="$(get_orgs)"
  repos=$(while read -r line; do \
    org_name=$(echo "$line" | awk '{ print $1; }')
    org_url=$(echo "$line" | awk '{ print $2; }')
    echo "$(get_org_repos $org_name $org_url)"
  done <<< "$orgs")
  echo "$repos"
}

get_all_user_repos() {
  echo "$(get_all_org_repos)"
  echo "$(get_user_repos)"
}

repos=$(get_all_user_repos | sort)

choice=$(echo "$repos" | fzf -n 1 --with-nth=1)

if [ -z "$choice" ]; then
  exit 0
fi

repo=$(echo "$choice" | awk '{ print $1; }')
repo_dir="$DEV_DIRECTORY/$repo"
clone_url=$(echo "$choice" | awk '{ print $3; }')

if [ ! -d "$repo_dir" ]; then
  git clone "$clone_url" "$repo_dir" > /dev/null 2>&1
fi

echo "$repo_dir"
